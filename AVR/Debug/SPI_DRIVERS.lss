
SPI_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00000bfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b63  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000853  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  0000209e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007be  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000034d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c2       	rjmp	.+1326   	; 0x574 <__vector_17>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 32       	cpi	r26, 0x22	; 34
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	28 d3       	rcall	.+1616   	; 0x6fa <main>
  aa:	6c c5       	rjmp	.+2776   	; 0xb84 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <timer0_init>:
int forward_left = 0;


void timer0_init()
{
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00) ;	
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	89 66       	ori	r24, 0x69	; 105
  b2:	83 bf       	out	0x33, r24	; 51
  b4:	08 95       	ret

000000b6 <timer1_init>:
}
void timer1_init()
{
	TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1B1);
  b6:	8f b5       	in	r24, 0x2f	; 47
  b8:	81 6a       	ori	r24, 0xA1	; 161
  ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12)|(1<<CS10);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	89 60       	ori	r24, 0x09	; 9
  c0:	8e bd       	out	0x2e, r24	; 46
  c2:	08 95       	ret

000000c4 <timer2_init>:
}
void timer2_init()
{
	TCCR2 |= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS20) ;
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	89 66       	ori	r24, 0x69	; 105
  c8:	85 bd       	out	0x25, r24	; 37
  ca:	08 95       	ret

000000cc <spi_init_slave>:
}

void spi_init_slave()
{
	DDRB |= MISO;
  cc:	bb 9a       	sbi	0x17, 3	; 23
	SPCR = (1<<SPE) | (1<<SPIE);
  ce:	80 ec       	ldi	r24, 0xC0	; 192
  d0:	8d b9       	out	0x0d, r24	; 13
  d2:	08 95       	ret

000000d4 <forward_motion_right>:


void forward_motion_right()
{
	// ones for forward direction, zeros for backward
	PORTE |=  MOTOR_RIGHT_F ;
  d4:	1b 9a       	sbi	0x03, 3	; 3
	PORTE |=  MOTOR_RIGHT_B ;
  d6:	1c 9a       	sbi	0x03, 4	; 3
  d8:	08 95       	ret

000000da <backward_motion_right>:
}

void backward_motion_right()
{
	// ones for backward direction, zeros for forward
	PORTE |=  MOTOR_RIGHT_B ;
  da:	1c 9a       	sbi	0x03, 4	; 3
	PORTE |=  MOTOR_RIGHT_F ;
  dc:	1b 9a       	sbi	0x03, 3	; 3
  de:	08 95       	ret

000000e0 <forward_motion_left>:
}

void forward_motion_left()
{
	// ones for forward direction, zeros for backward
	PORTE |= MOTOR_LEFT_F ;
  e0:	1d 9a       	sbi	0x03, 5	; 3
	PORTE |= MOTOR_LEFT_B ;
  e2:	1e 9a       	sbi	0x03, 6	; 3
  e4:	08 95       	ret

000000e6 <backward_motion_left>:
}

void backward_motion_left()
{
	// ones for backward direction, zeros for forward
	PORTE |= MOTOR_LEFT_B ;
  e6:	1e 9a       	sbi	0x03, 6	; 3
	PORTE |= MOTOR_LEFT_F ;
  e8:	1d 9a       	sbi	0x03, 5	; 3
  ea:	08 95       	ret

000000ec <calculate_pwms>:
	//PORTE &= ~(MOTOR_LEFT_F);
}

void calculate_pwms (float voltR, float voltL)
{	
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	69 01       	movw	r12, r18
  fa:	7a 01       	movw	r14, r20
	int pwmR, pwmL;
	pwmR = (int)((voltR /  maxVolt) * 255);
  fc:	2a e9       	ldi	r18, 0x9A	; 154
  fe:	39 e9       	ldi	r19, 0x99	; 153
 100:	49 ec       	ldi	r20, 0xC9	; 201
 102:	50 e4       	ldi	r21, 0x40	; 64
 104:	8d d3       	rcall	.+1818   	; 0x820 <__divsf3>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	4f e7       	ldi	r20, 0x7F	; 127
 10c:	53 e4       	ldi	r21, 0x43	; 67
 10e:	d7 d4       	rcall	.+2478   	; 0xabe <__mulsf3>
 110:	ef d3       	rcall	.+2014   	; 0x8f0 <__fixsfsi>
 112:	c6 2f       	mov	r28, r22
 114:	d7 2f       	mov	r29, r23

	pwmL = (int)((voltL /  maxVolt) * 255);
 116:	2a e9       	ldi	r18, 0x9A	; 154
 118:	39 e9       	ldi	r19, 0x99	; 153
 11a:	49 ec       	ldi	r20, 0xC9	; 201
 11c:	50 e4       	ldi	r21, 0x40	; 64
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	7e d3       	rcall	.+1788   	; 0x820 <__divsf3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	4f e7       	ldi	r20, 0x7F	; 127
 12a:	53 e4       	ldi	r21, 0x43	; 67
 12c:	c8 d4       	rcall	.+2448   	; 0xabe <__mulsf3>
 12e:	e0 d3       	rcall	.+1984   	; 0x8f0 <__fixsfsi>
	
	if (forward_right)
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <forward_right>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <forward_right+0x1>
 138:	89 2b       	or	r24, r25
 13a:	31 f0       	breq	.+12     	; 0x148 <calculate_pwms+0x5c>
	{
		OCR0 =0;	
 13c:	11 be       	out	0x31, r1	; 49
		OCR1A = pwmR;
 13e:	8c 2f       	mov	r24, r28
 140:	9d 2f       	mov	r25, r29
 142:	9b bd       	out	0x2b, r25	; 43
 144:	8a bd       	out	0x2a, r24	; 42
 146:	03 c0       	rjmp	.+6      	; 0x14e <calculate_pwms+0x62>
	}
	else 
	{
		OCR0 = pwmR;
 148:	c1 bf       	out	0x31, r28	; 49
		OCR1A = 0;
 14a:	1b bc       	out	0x2b, r1	; 43
 14c:	1a bc       	out	0x2a, r1	; 42
	}
	
	if (forward_left)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 156:	89 2b       	or	r24, r25
 158:	31 f0       	breq	.+12     	; 0x166 <calculate_pwms+0x7a>
	{
		OCR2 =0;
 15a:	13 bc       	out	0x23, r1	; 35
		OCR1B = pwmL;
 15c:	86 2f       	mov	r24, r22
 15e:	97 2f       	mov	r25, r23
 160:	99 bd       	out	0x29, r25	; 41
 162:	88 bd       	out	0x28, r24	; 40
 164:	03 c0       	rjmp	.+6      	; 0x16c <calculate_pwms+0x80>
	}
	else
	{
		OCR2 = pwmL;
 166:	63 bd       	out	0x23, r22	; 35
		OCR1B = 0;
 168:	19 bc       	out	0x29, r1	; 41
 16a:	18 bc       	out	0x28, r1	; 40
	OCR2 =255;
	OCR1A = 255;
	OCR1B = 255;
	*/
	
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	08 95       	ret

0000017a <calculate_voltages>:

void calculate_voltages(float velocityR,float velocityL)
{
 17a:	8f 92       	push	r8
 17c:	9f 92       	push	r9
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	6b 01       	movw	r12, r22
 18c:	7c 01       	movw	r14, r24
 18e:	49 01       	movw	r8, r18
 190:	5a 01       	movw	r10, r20
	//voltR = (0.04205 * velocityL) + 0.6013;
	voltR = (0.0416 * velocityR) + 0.6329;
	voltL = (0.0413 * velocityL) + 0.6356;
	
	
	if ( velocityR == 0.0 )
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	a9 01       	movw	r20, r18
 198:	3f d3       	rcall	.+1662   	; 0x818 <__cmpsf2>
 19a:	88 23       	and	r24, r24
 19c:	79 f0       	breq	.+30     	; 0x1bc <calculate_voltages+0x42>
{
	float voltR,voltL;
	
	//voltL = (0.04175 * velocityR) + 0.59855;
	//voltR = (0.04205 * velocityL) + 0.6013;
	voltR = (0.0416 * velocityR) + 0.6329;
 19e:	23 ec       	ldi	r18, 0xC3	; 195
 1a0:	34 e6       	ldi	r19, 0x64	; 100
 1a2:	4a e2       	ldi	r20, 0x2A	; 42
 1a4:	5d e3       	ldi	r21, 0x3D	; 61
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	89 d4       	rcall	.+2322   	; 0xabe <__mulsf3>
 1ac:	2c eb       	ldi	r18, 0xBC	; 188
 1ae:	35 e0       	ldi	r19, 0x05	; 5
 1b0:	42 e2       	ldi	r20, 0x22	; 34
 1b2:	5f e3       	ldi	r21, 0x3F	; 63
 1b4:	cd d2       	rcall	.+1434   	; 0x750 <__addsf3>
 1b6:	6b 01       	movw	r12, r22
 1b8:	7c 01       	movw	r14, r24
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <calculate_voltages+0x48>
	voltL = (0.0413 * velocityL) + 0.6356;
	
	
	if ( velocityR == 0.0 )
	{
		voltR = 0.0;
 1bc:	c1 2c       	mov	r12, r1
 1be:	d1 2c       	mov	r13, r1
 1c0:	76 01       	movw	r14, r12
	}
	if ( velocityL == 0.0 )
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	a9 01       	movw	r20, r18
 1c8:	c5 01       	movw	r24, r10
 1ca:	b4 01       	movw	r22, r8
 1cc:	25 d3       	rcall	.+1610   	; 0x818 <__cmpsf2>
 1ce:	88 23       	and	r24, r24
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <calculate_voltages+0x76>
	float voltR,voltL;
	
	//voltL = (0.04175 * velocityR) + 0.59855;
	//voltR = (0.04205 * velocityL) + 0.6013;
	voltR = (0.0416 * velocityR) + 0.6329;
	voltL = (0.0413 * velocityL) + 0.6356;
 1d2:	20 e3       	ldi	r18, 0x30	; 48
 1d4:	3a e2       	ldi	r19, 0x2A	; 42
 1d6:	49 e2       	ldi	r20, 0x29	; 41
 1d8:	5d e3       	ldi	r21, 0x3D	; 61
 1da:	c5 01       	movw	r24, r10
 1dc:	b4 01       	movw	r22, r8
 1de:	6f d4       	rcall	.+2270   	; 0xabe <__mulsf3>
 1e0:	2e ea       	ldi	r18, 0xAE	; 174
 1e2:	36 eb       	ldi	r19, 0xB6	; 182
 1e4:	42 e2       	ldi	r20, 0x22	; 34
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	b3 d2       	rcall	.+1382   	; 0x750 <__addsf3>
 1ea:	9b 01       	movw	r18, r22
 1ec:	ac 01       	movw	r20, r24
	{
		voltR = 0.0;
	}
	if ( velocityL == 0.0 )
	{
		voltL = 0.0;
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <calculate_voltages+0x7c>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	calculate_pwms(voltR, voltL);
 1f4:	a9 01       	movw	r20, r18
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	78 df       	rcall	.-272    	; 0xec <calculate_pwms>
}
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	9f 90       	pop	r9
 20a:	8f 90       	pop	r8
 20c:	08 95       	ret

0000020e <calculate_velocities>:

void calculate_velocities(float v,float w)
{
 20e:	4f 92       	push	r4
 210:	5f 92       	push	r5
 212:	6f 92       	push	r6
 214:	7f 92       	push	r7
 216:	8f 92       	push	r8
 218:	9f 92       	push	r9
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	6b 01       	movw	r12, r22
 228:	7c 01       	movw	r14, r24
 22a:	49 01       	movw	r8, r18
 22c:	5a 01       	movw	r10, r20
	float rightVelocity ,leftVelocity;
	
	//Stop Motors
	if (v == 0.0 && w == 0.0)
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	a9 01       	movw	r20, r18
 234:	f1 d2       	rcall	.+1506   	; 0x818 <__cmpsf2>
 236:	81 11       	cpse	r24, r1
 238:	09 c0       	rjmp	.+18     	; 0x24c <calculate_velocities+0x3e>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	a9 01       	movw	r20, r18
 240:	c5 01       	movw	r24, r10
 242:	b4 01       	movw	r22, r8
 244:	e9 d2       	rcall	.+1490   	; 0x818 <__cmpsf2>
 246:	88 23       	and	r24, r24
 248:	09 f4       	brne	.+2      	; 0x24c <calculate_velocities+0x3e>
 24a:	35 c1       	rjmp	.+618    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		rightVelocity = leftVelocity = 0.0;
	}
	else
	{	
		//threshold
		if (v > maxLinearVelocity)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	4c ed       	ldi	r20, 0xDC	; 220
 252:	52 e4       	ldi	r21, 0x42	; 66
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	2e d4       	rcall	.+2140   	; 0xab6 <__gesf2>
 25a:	18 16       	cp	r1, r24
 25c:	0c f4       	brge	.+2      	; 0x260 <calculate_velocities+0x52>
 25e:	4c c1       	rjmp	.+664    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		{
			v = maxLinearVelocity;
		}
		else if (v < (-1 * maxLinearVelocity))
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	4c ed       	ldi	r20, 0xDC	; 220
 266:	52 ec       	ldi	r21, 0xC2	; 194
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	d5 d2       	rcall	.+1450   	; 0x818 <__cmpsf2>
 26e:	88 23       	and	r24, r24
 270:	0c f4       	brge	.+2      	; 0x274 <calculate_velocities+0x66>
 272:	37 c1       	rjmp	.+622    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		{
			v = -1 * maxLinearVelocity;
		}
	
		if ( w > maxW)
 274:	22 e9       	ldi	r18, 0x92	; 146
 276:	3a e0       	ldi	r19, 0x0A	; 10
 278:	46 e8       	ldi	r20, 0x86	; 134
 27a:	5f e3       	ldi	r21, 0x3F	; 63
 27c:	c5 01       	movw	r24, r10
 27e:	b4 01       	movw	r22, r8
 280:	1a d4       	rcall	.+2100   	; 0xab6 <__gesf2>
 282:	18 16       	cp	r1, r24
 284:	54 f0       	brlt	.+20     	; 0x29a <calculate_velocities+0x8c>
		{
			w = maxW;
		}
		else if ( w < (-1 * maxW))
 286:	22 e9       	ldi	r18, 0x92	; 146
 288:	3a e0       	ldi	r19, 0x0A	; 10
 28a:	46 e8       	ldi	r20, 0x86	; 134
 28c:	5f eb       	ldi	r21, 0xBF	; 191
 28e:	c5 01       	movw	r24, r10
 290:	b4 01       	movw	r22, r8
 292:	c2 d2       	rcall	.+1412   	; 0x818 <__cmpsf2>
 294:	88 23       	and	r24, r24
 296:	64 f0       	brlt	.+24     	; 0x2b0 <calculate_velocities+0xa2>
 298:	15 c0       	rjmp	.+42     	; 0x2c4 <calculate_velocities+0xb6>
			v = -1 * maxLinearVelocity;
		}
	
		if ( w > maxW)
		{
			w = maxW;
 29a:	0f 2e       	mov	r0, r31
 29c:	f2 e9       	ldi	r31, 0x92	; 146
 29e:	8f 2e       	mov	r8, r31
 2a0:	fa e0       	ldi	r31, 0x0A	; 10
 2a2:	9f 2e       	mov	r9, r31
 2a4:	f6 e8       	ldi	r31, 0x86	; 134
 2a6:	af 2e       	mov	r10, r31
 2a8:	ff e3       	ldi	r31, 0x3F	; 63
 2aa:	bf 2e       	mov	r11, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <calculate_velocities+0xb6>
		}
		else if ( w < (-1 * maxW))
		{
			w = -1 * maxW;
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f2 e9       	ldi	r31, 0x92	; 146
 2b4:	8f 2e       	mov	r8, r31
 2b6:	fa e0       	ldi	r31, 0x0A	; 10
 2b8:	9f 2e       	mov	r9, r31
 2ba:	f6 e8       	ldi	r31, 0x86	; 134
 2bc:	af 2e       	mov	r10, r31
 2be:	ff eb       	ldi	r31, 0xBF	; 191
 2c0:	bf 2e       	mov	r11, r31
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
 2c2:	f0 2d       	mov	r31, r0
 2c4:	2b ed       	ldi	r18, 0xDB	; 219
 2c6:	3f e0       	ldi	r19, 0x0F	; 15
 2c8:	49 e4       	ldi	r20, 0x49	; 73
 2ca:	50 e4       	ldi	r21, 0x40	; 64
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	f6 d3       	rcall	.+2028   	; 0xabe <__mulsf3>
 2d2:	2f e8       	ldi	r18, 0x8F	; 143
 2d4:	32 ec       	ldi	r19, 0xC2	; 194
 2d6:	45 e7       	ldi	r20, 0x75	; 117
 2d8:	5d e3       	ldi	r21, 0x3D	; 61
 2da:	f1 d3       	rcall	.+2018   	; 0xabe <__mulsf3>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 ef       	ldi	r20, 0xF0	; 240
 2e2:	51 e4       	ldi	r21, 0x41	; 65
 2e4:	9d d2       	rcall	.+1338   	; 0x820 <__divsf3>
 2e6:	6b 01       	movw	r12, r22
 2e8:	7c 01       	movw	r14, r24
 2ea:	2d e3       	ldi	r18, 0x3D	; 61
 2ec:	3a e0       	ldi	r19, 0x0A	; 10
 2ee:	47 ed       	ldi	r20, 0xD7	; 215
 2f0:	5e e3       	ldi	r21, 0x3E	; 62
 2f2:	c5 01       	movw	r24, r10
 2f4:	b4 01       	movw	r22, r8
 2f6:	e3 d3       	rcall	.+1990   	; 0xabe <__mulsf3>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	5f e3       	ldi	r21, 0x3F	; 63
 300:	de d3       	rcall	.+1980   	; 0xabe <__mulsf3>
 302:	2b 01       	movw	r4, r22
 304:	3c 01       	movw	r6, r24
 306:	9b 01       	movw	r18, r22
 308:	ac 01       	movw	r20, r24
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	20 d2       	rcall	.+1088   	; 0x750 <__addsf3>
 310:	2a ea       	ldi	r18, 0xAA	; 170
 312:	37 e2       	ldi	r19, 0x27	; 39
 314:	4f e1       	ldi	r20, 0x1F	; 31
 316:	53 e4       	ldi	r21, 0x43	; 67
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
 318:	d2 d3       	rcall	.+1956   	; 0xabe <__mulsf3>
 31a:	4b 01       	movw	r8, r22
 31c:	5c 01       	movw	r10, r24
 31e:	a3 01       	movw	r20, r6
 320:	92 01       	movw	r18, r4
 322:	c7 01       	movw	r24, r14
 324:	b6 01       	movw	r22, r12
 326:	13 d2       	rcall	.+1062   	; 0x74e <__subsf3>
 328:	2a ea       	ldi	r18, 0xAA	; 170
 32a:	37 e2       	ldi	r19, 0x27	; 39
 32c:	4f e1       	ldi	r20, 0x1F	; 31
 32e:	53 e4       	ldi	r21, 0x43	; 67
 330:	c6 d3       	rcall	.+1932   	; 0xabe <__mulsf3>
	
		if (rightVelocity <= 0.0)
 332:	6b 01       	movw	r12, r22
 334:	7c 01       	movw	r14, r24
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	a9 01       	movw	r20, r18
 33c:	c5 01       	movw	r24, r10
 33e:	b4 01       	movw	r22, r8
 340:	6b d2       	rcall	.+1238   	; 0x818 <__cmpsf2>
 342:	18 16       	cp	r1, r24
 344:	54 f1       	brlt	.+84     	; 0x39a <calculate_velocities+0x18c>
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
 346:	23 c0       	rjmp	.+70     	; 0x38e <calculate_velocities+0x180>
 348:	0f 2e       	mov	r0, r31
 34a:	c1 2c       	mov	r12, r1
 34c:	d1 2c       	mov	r13, r1
 34e:	f1 e1       	ldi	r31, 0x11	; 17
 350:	ef 2e       	mov	r14, r31
 352:	f3 ec       	ldi	r31, 0xC3	; 195
 354:	ff 2e       	mov	r15, r31
		else if ( w < (-1 * maxW))
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
 356:	f0 2d       	mov	r31, r0
 358:	0f 2e       	mov	r0, r31
 35a:	88 24       	eor	r8, r8
 35c:	8a 94       	dec	r8
 35e:	98 2c       	mov	r9, r8
 360:	f5 e9       	ldi	r31, 0x95	; 149
 362:	af 2e       	mov	r10, r31
 364:	f2 ec       	ldi	r31, 0xC2	; 194
 366:	bf 2e       	mov	r11, r31
 368:	f0 2d       	mov	r31, r0
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
 36a:	11 c0       	rjmp	.+34     	; 0x38e <calculate_velocities+0x180>
 36c:	0f 2e       	mov	r0, r31
 36e:	cc 24       	eor	r12, r12
 370:	ca 94       	dec	r12
 372:	dc 2c       	mov	r13, r12
 374:	f5 e9       	ldi	r31, 0x95	; 149
 376:	ef 2e       	mov	r14, r31
 378:	f2 ec       	ldi	r31, 0xC2	; 194
		else if ( w < (-1 * maxW))
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
 37a:	ff 2e       	mov	r15, r31
 37c:	f0 2d       	mov	r31, r0
 37e:	0f 2e       	mov	r0, r31
 380:	81 2c       	mov	r8, r1
 382:	91 2c       	mov	r9, r1
 384:	f1 e1       	ldi	r31, 0x11	; 17
 386:	af 2e       	mov	r10, r31
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
	
		if (rightVelocity <= 0.0)
		{
			 backward_motion_right();
 388:	f3 ec       	ldi	r31, 0xC3	; 195
 38a:	bf 2e       	mov	r11, r31
			 forward_right = 0;
 38c:	f0 2d       	mov	r31, r0
 38e:	a5 de       	rcall	.-694    	; 0xda <backward_motion_right>
 390:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <forward_right+0x1>
 394:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <forward_right>
		}
		else if (rightVelocity > 0.0)
 398:	33 c0       	rjmp	.+102    	; 0x400 <__LOCK_REGION_LENGTH__>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	a9 01       	movw	r20, r18
 3a0:	c5 01       	movw	r24, r10
 3a2:	b4 01       	movw	r22, r8
 3a4:	88 d3       	rcall	.+1808   	; 0xab6 <__gesf2>
 3a6:	18 16       	cp	r1, r24
 3a8:	5c f5       	brge	.+86     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
 3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <calculate_velocities+0x1e4>
 3ac:	0f 2e       	mov	r0, r31
 3ae:	cc 24       	eor	r12, r12
 3b0:	ca 94       	dec	r12
 3b2:	dc 2c       	mov	r13, r12
 3b4:	f5 e9       	ldi	r31, 0x95	; 149
 3b6:	ef 2e       	mov	r14, r31
 3b8:	f2 e4       	ldi	r31, 0x42	; 66
 3ba:	ff 2e       	mov	r15, r31
		else if ( w < (-1 * maxW))
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
 3bc:	f0 2d       	mov	r31, r0
 3be:	0f 2e       	mov	r0, r31
 3c0:	81 2c       	mov	r8, r1
 3c2:	91 2c       	mov	r9, r1
 3c4:	f1 e1       	ldi	r31, 0x11	; 17
 3c6:	af 2e       	mov	r10, r31
 3c8:	f3 e4       	ldi	r31, 0x43	; 67
 3ca:	bf 2e       	mov	r11, r31
		leftVelocity = ((v * PI * R /30.0 ) - (w * L /2.0)) * (30.0 / (PI * R));
 3cc:	f0 2d       	mov	r31, r0
 3ce:	11 c0       	rjmp	.+34     	; 0x3f2 <calculate_velocities+0x1e4>
 3d0:	0f 2e       	mov	r0, r31
 3d2:	c1 2c       	mov	r12, r1
 3d4:	d1 2c       	mov	r13, r1
 3d6:	f1 e1       	ldi	r31, 0x11	; 17
 3d8:	ef 2e       	mov	r14, r31
 3da:	f3 e4       	ldi	r31, 0x43	; 67
		else if ( w < (-1 * maxW))
		{
			w = -1 * maxW;
		}
		
		rightVelocity = ((v * PI * R /30.0 ) + (w * L /2.0)) * (30.0 / (PI * R));
 3dc:	ff 2e       	mov	r15, r31
 3de:	f0 2d       	mov	r31, r0
 3e0:	0f 2e       	mov	r0, r31
 3e2:	88 24       	eor	r8, r8
 3e4:	8a 94       	dec	r8
 3e6:	98 2c       	mov	r9, r8
 3e8:	f5 e9       	ldi	r31, 0x95	; 149
			 backward_motion_right();
			 forward_right = 0;
		}
		else if (rightVelocity > 0.0)
		{
			forward_motion_right();
 3ea:	af 2e       	mov	r10, r31
 3ec:	f2 e4       	ldi	r31, 0x42	; 66
			forward_right = 1;
 3ee:	bf 2e       	mov	r11, r31
 3f0:	f0 2d       	mov	r31, r0
 3f2:	70 de       	rcall	.-800    	; 0xd4 <forward_motion_right>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (leftVelocity <= 0.0)
 3f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <forward_right+0x1>
 3fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <forward_right>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	a9 01       	movw	r20, r18
		{
			backward_motion_left();
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
			forward_left = 0;
 40a:	06 d2       	rcall	.+1036   	; 0x818 <__cmpsf2>
 40c:	18 16       	cp	r1, r24
 40e:	34 f0       	brlt	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 410:	6a de       	rcall	.-812    	; 0xe6 <backward_motion_left>
		}
		else if (leftVelocity > 0.0)
 412:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 416:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
		{
			forward_motion_left();
 420:	a9 01       	movw	r20, r18
			forward_left = 1;
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	47 d3       	rcall	.+1678   	; 0xab6 <__gesf2>
 428:	18 16       	cp	r1, r24
 42a:	3c f4       	brge	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	59 de       	rcall	.-846    	; 0xe0 <forward_motion_left>
		}
		
		//threshold
		if (rightVelocity > maxVelocity)
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 436:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	4e ef       	ldi	r20, 0xFE	; 254
 440:	52 e4       	ldi	r21, 0x42	; 66
		{
			rightVelocity = maxVelocity;
		}
		else if (rightVelocity < (-1 * maxVelocity)) 
 442:	c5 01       	movw	r24, r10
 444:	b4 01       	movw	r22, r8
 446:	37 d3       	rcall	.+1646   	; 0xab6 <__gesf2>
 448:	18 16       	cp	r1, r24
 44a:	94 f0       	brlt	.+36     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	4e ef       	ldi	r20, 0xFE	; 254
 452:	52 ec       	ldi	r21, 0xC2	; 194
		{
			rightVelocity = -1 * maxVelocity;
 454:	c5 01       	movw	r24, r10
 456:	b4 01       	movw	r22, r8
 458:	df d1       	rcall	.+958    	; 0x818 <__cmpsf2>
 45a:	88 23       	and	r24, r24
 45c:	8c f4       	brge	.+34     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 45e:	0f 2e       	mov	r0, r31
 460:	81 2c       	mov	r8, r1
 462:	91 2c       	mov	r9, r1
		}
		
		//threshold
		if (rightVelocity > maxVelocity)
		{
			rightVelocity = maxVelocity;
 464:	fe ef       	ldi	r31, 0xFE	; 254
 466:	af 2e       	mov	r10, r31
 468:	f2 ec       	ldi	r31, 0xC2	; 194
 46a:	bf 2e       	mov	r11, r31
 46c:	f0 2d       	mov	r31, r0
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 470:	0f 2e       	mov	r0, r31
 472:	81 2c       	mov	r8, r1
		}
		else if (rightVelocity < (-1 * maxVelocity)) 
		{
			rightVelocity = -1 * maxVelocity;
		}
		if (leftVelocity > maxVelocity) 
 474:	91 2c       	mov	r9, r1
 476:	fe ef       	ldi	r31, 0xFE	; 254
 478:	af 2e       	mov	r10, r31
 47a:	f2 e4       	ldi	r31, 0x42	; 66
 47c:	bf 2e       	mov	r11, r31
 47e:	f0 2d       	mov	r31, r0
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	4e ef       	ldi	r20, 0xFE	; 254
 486:	52 e4       	ldi	r21, 0x42	; 66
		{
			leftVelocity = maxVelocity;
		}
		if (leftVelocity < (-1 * maxVelocity)) 
 488:	c7 01       	movw	r24, r14
 48a:	b6 01       	movw	r22, r12
 48c:	14 d3       	rcall	.+1576   	; 0xab6 <__gesf2>
 48e:	18 16       	cp	r1, r24
 490:	c4 f0       	brlt	.+48     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	4e ef       	ldi	r20, 0xFE	; 254
 498:	52 ec       	ldi	r21, 0xC2	; 194
 49a:	c7 01       	movw	r24, r14
		{
			leftVelocity = -1 * maxVelocity;
 49c:	b6 01       	movw	r22, r12
 49e:	bc d1       	rcall	.+888    	; 0x818 <__cmpsf2>
 4a0:	88 23       	and	r24, r24
 4a2:	bc f4       	brge	.+46     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4a4:	0f 2e       	mov	r0, r31
 4a6:	c1 2c       	mov	r12, r1
 4a8:	d1 2c       	mov	r13, r1
 4aa:	fe ef       	ldi	r31, 0xFE	; 254
	float rightVelocity ,leftVelocity;
	
	//Stop Motors
	if (v == 0.0 && w == 0.0)
	{
		rightVelocity = leftVelocity = 0.0;
 4ac:	ef 2e       	mov	r14, r31
 4ae:	f2 ec       	ldi	r31, 0xC2	; 194
 4b0:	ff 2e       	mov	r15, r31
 4b2:	f0 2d       	mov	r31, r0
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		{
			rightVelocity = -1 * maxVelocity;
		}
		if (leftVelocity > maxVelocity) 
		{
			leftVelocity = maxVelocity;
 4b6:	c1 2c       	mov	r12, r1
 4b8:	d1 2c       	mov	r13, r1
 4ba:	76 01       	movw	r14, r12
 4bc:	46 01       	movw	r8, r12
 4be:	57 01       	movw	r10, r14
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c2:	0f 2e       	mov	r0, r31
			leftVelocity = -1 * maxVelocity;
		}
		
	}
	
	calculate_voltages(fabsf(rightVelocity),fabsf(leftVelocity));
 4c4:	c1 2c       	mov	r12, r1
 4c6:	d1 2c       	mov	r13, r1
 4c8:	fe ef       	ldi	r31, 0xFE	; 254
 4ca:	ef 2e       	mov	r14, r31
 4cc:	f2 e4       	ldi	r31, 0x42	; 66
 4ce:	ff 2e       	mov	r15, r31
 4d0:	f0 2d       	mov	r31, r0
 4d2:	a7 01       	movw	r20, r14
		else if (v < (-1 * maxLinearVelocity))
		{
			v = -1 * maxLinearVelocity;
		}
	
		if ( w > maxW)
 4d4:	96 01       	movw	r18, r12
 4d6:	5f 77       	andi	r21, 0x7F	; 127
 4d8:	c5 01       	movw	r24, r10
 4da:	b4 01       	movw	r22, r8
 4dc:	9f 77       	andi	r25, 0x7F	; 127
 4de:	4d de       	rcall	.-870    	; 0x17a <calculate_voltages>
 4e0:	3c c0       	rjmp	.+120    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 4e2:	22 e9       	ldi	r18, 0x92	; 146
 4e4:	3a e0       	ldi	r19, 0x0A	; 10
 4e6:	46 e8       	ldi	r20, 0x86	; 134
 4e8:	5f e3       	ldi	r21, 0x3F	; 63
 4ea:	c5 01       	movw	r24, r10
 4ec:	b4 01       	movw	r22, r8
 4ee:	e3 d2       	rcall	.+1478   	; 0xab6 <__gesf2>
 4f0:	18 16       	cp	r1, r24
 4f2:	0c f4       	brge	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	29 cf       	rjmp	.-430    	; 0x348 <calculate_velocities+0x13a>
 4f6:	0b c0       	rjmp	.+22     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4f8:	22 e9       	ldi	r18, 0x92	; 146
 4fa:	3a e0       	ldi	r19, 0x0A	; 10
 4fc:	46 e8       	ldi	r20, 0x86	; 134
 4fe:	5f e3       	ldi	r21, 0x3F	; 63
		{
			w = maxW;
		}
		else if ( w < (-1 * maxW))
 500:	c5 01       	movw	r24, r10
 502:	b4 01       	movw	r22, r8
 504:	d8 d2       	rcall	.+1456   	; 0xab6 <__gesf2>
 506:	18 16       	cp	r1, r24
 508:	0c f4       	brge	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	50 cf       	rjmp	.-352    	; 0x3ac <calculate_velocities+0x19e>
 50c:	13 c0       	rjmp	.+38     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 50e:	22 e9       	ldi	r18, 0x92	; 146
 510:	3a e0       	ldi	r19, 0x0A	; 10
 512:	46 e8       	ldi	r20, 0x86	; 134
 514:	5f eb       	ldi	r21, 0xBF	; 191
		{
			v = maxLinearVelocity;
		}
		else if (v < (-1 * maxLinearVelocity))
		{
			v = -1 * maxLinearVelocity;
 516:	c5 01       	movw	r24, r10
 518:	b4 01       	movw	r22, r8
 51a:	7e d1       	rcall	.+764    	; 0x818 <__cmpsf2>
 51c:	88 23       	and	r24, r24
 51e:	0c f4       	brge	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	25 cf       	rjmp	.-438    	; 0x36c <calculate_velocities+0x15e>
 522:	0f 2e       	mov	r0, r31
 524:	c1 2c       	mov	r12, r1
 526:	d1 2c       	mov	r13, r1
	
		if ( w > maxW)
		{
			w = maxW;
		}
		else if ( w < (-1 * maxW))
 528:	fc ed       	ldi	r31, 0xDC	; 220
 52a:	ef 2e       	mov	r14, r31
 52c:	f2 ec       	ldi	r31, 0xC2	; 194
 52e:	ff 2e       	mov	r15, r31
 530:	f0 2d       	mov	r31, r0
 532:	c8 ce       	rjmp	.-624    	; 0x2c4 <calculate_velocities+0xb6>
 534:	22 e9       	ldi	r18, 0x92	; 146
 536:	3a e0       	ldi	r19, 0x0A	; 10
 538:	46 e8       	ldi	r20, 0x86	; 134
 53a:	5f eb       	ldi	r21, 0xBF	; 191
 53c:	c5 01       	movw	r24, r10
	else
	{	
		//threshold
		if (v > maxLinearVelocity)
		{
			v = maxLinearVelocity;
 53e:	b4 01       	movw	r22, r8
 540:	6b d1       	rcall	.+726    	; 0x818 <__cmpsf2>
 542:	88 23       	and	r24, r24
 544:	0c f4       	brge	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 546:	44 cf       	rjmp	.-376    	; 0x3d0 <calculate_velocities+0x1c2>
 548:	0f 2e       	mov	r0, r31
 54a:	c1 2c       	mov	r12, r1
 54c:	d1 2c       	mov	r13, r1
 54e:	fc ed       	ldi	r31, 0xDC	; 220
		}
		
	}
	
	calculate_voltages(fabsf(rightVelocity),fabsf(leftVelocity));
}
 550:	ef 2e       	mov	r14, r31
 552:	f2 e4       	ldi	r31, 0x42	; 66
 554:	ff 2e       	mov	r15, r31
 556:	f0 2d       	mov	r31, r0
 558:	b5 ce       	rjmp	.-662    	; 0x2c4 <calculate_velocities+0xb6>
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	bf 90       	pop	r11
 564:	af 90       	pop	r10
 566:	9f 90       	pop	r9
 568:	8f 90       	pop	r8
 56a:	7f 90       	pop	r7
 56c:	6f 90       	pop	r6
 56e:	5f 90       	pop	r5
 570:	4f 90       	pop	r4
 572:	08 95       	ret

00000574 <__vector_17>:
	DDRB |= MISO;
	SPCR = (1<<SPE) | (1<<SPIE);
}

ISR (SPI_STC_vect)
{
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	0b b6       	in	r0, 0x3b	; 59
 580:	0f 92       	push	r0
 582:	cf 92       	push	r12
 584:	df 92       	push	r13
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	//counter == 0 >> value(v)
	//counter == 1 >> sign(v), if 1 >> negative
	//counter == 2 >> value(w)
	//counter == 3 >> sign(w), if 1 >> negative
	
	msg = (float)SPDR;
 5a6:	6f b1       	in	r22, 0x0f	; 15
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	d1 d1       	rcall	.+930    	; 0x952 <__floatunsisf>
 5b0:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <msg>
 5b4:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <msg+0x1>
 5b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <msg+0x2>
 5bc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <msg+0x3>
	
	received [counter] = msg;
 5c0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <counter>
 5c4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <counter+0x1>
 5c8:	f9 01       	movw	r30, r18
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	ee 5e       	subi	r30, 0xEE	; 238
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	60 83       	st	Z, r22
 5d8:	71 83       	std	Z+1, r23	; 0x01
 5da:	82 83       	std	Z+2, r24	; 0x02
 5dc:	93 83       	std	Z+3, r25	; 0x03
	counter++;
 5de:	c9 01       	movw	r24, r18
 5e0:	01 96       	adiw	r24, 0x01	; 1
	
	if (counter == 4)
 5e2:	84 30       	cpi	r24, 0x04	; 4
 5e4:	91 05       	cpc	r25, r1
 5e6:	29 f0       	breq	.+10     	; 0x5f2 <__vector_17+0x7e>
	//counter == 3 >> sign(w), if 1 >> negative
	
	msg = (float)SPDR;
	
	received [counter] = msg;
	counter++;
 5e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x1>
 5ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter>
 5f0:	6b c0       	rjmp	.+214    	; 0x6c8 <__vector_17+0x154>
	
	if (counter == 4)
	{
		counter = 0;
 5f2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter+0x1>
 5f6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter>
		
		v = received [0];
 5fa:	e2 e1       	ldi	r30, 0x12	; 18
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	c0 80       	ld	r12, Z
 600:	d1 80       	ldd	r13, Z+1	; 0x01
 602:	e2 80       	ldd	r14, Z+2	; 0x02
 604:	f3 80       	ldd	r15, Z+3	; 0x03
 606:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <v>
 60a:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <v+0x1>
 60e:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <v+0x2>
 612:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <v+0x3>
		if  (received [1] == 1)
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e8       	ldi	r20, 0x80	; 128
 61c:	5f e3       	ldi	r21, 0x3F	; 63
 61e:	64 81       	ldd	r22, Z+4	; 0x04
 620:	75 81       	ldd	r23, Z+5	; 0x05
 622:	86 81       	ldd	r24, Z+6	; 0x06
 624:	97 81       	ldd	r25, Z+7	; 0x07
 626:	f8 d0       	rcall	.+496    	; 0x818 <__cmpsf2>
 628:	81 11       	cpse	r24, r1
 62a:	0c c0       	rjmp	.+24     	; 0x644 <__vector_17+0xd0>
		{
			v = -1 * v;
 62c:	f7 fa       	bst	r15, 7
 62e:	f0 94       	com	r15
 630:	f7 f8       	bld	r15, 7
 632:	f0 94       	com	r15
 634:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <v>
 638:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <v+0x1>
 63c:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <v+0x2>
 640:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <v+0x3>
		}
		
		w = received[2];
 644:	c2 e1       	ldi	r28, 0x12	; 18
 646:	d1 e0       	ldi	r29, 0x01	; 1
		w = w * PI / 180.0;
 648:	2b ed       	ldi	r18, 0xDB	; 219
 64a:	3f e0       	ldi	r19, 0x0F	; 15
 64c:	49 e4       	ldi	r20, 0x49	; 73
 64e:	50 e4       	ldi	r21, 0x40	; 64
 650:	68 85       	ldd	r22, Y+8	; 0x08
 652:	79 85       	ldd	r23, Y+9	; 0x09
 654:	8a 85       	ldd	r24, Y+10	; 0x0a
 656:	9b 85       	ldd	r25, Y+11	; 0x0b
 658:	32 d2       	rcall	.+1124   	; 0xabe <__mulsf3>
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	44 e3       	ldi	r20, 0x34	; 52
 660:	53 e4       	ldi	r21, 0x43	; 67
 662:	de d0       	rcall	.+444    	; 0x820 <__divsf3>
 664:	6b 01       	movw	r12, r22
 666:	7c 01       	movw	r14, r24
 668:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <w>
 66c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <w+0x1>
 670:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <w+0x2>
 674:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <w+0x3>
		if  (received [3] == 1)
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	40 e8       	ldi	r20, 0x80	; 128
 67e:	5f e3       	ldi	r21, 0x3F	; 63
 680:	6c 85       	ldd	r22, Y+12	; 0x0c
 682:	7d 85       	ldd	r23, Y+13	; 0x0d
 684:	8e 85       	ldd	r24, Y+14	; 0x0e
 686:	9f 85       	ldd	r25, Y+15	; 0x0f
 688:	c7 d0       	rcall	.+398    	; 0x818 <__cmpsf2>
 68a:	81 11       	cpse	r24, r1
 68c:	0c c0       	rjmp	.+24     	; 0x6a6 <__vector_17+0x132>
		{
			w = -1 * w;
 68e:	f7 fa       	bst	r15, 7
 690:	f0 94       	com	r15
 692:	f7 f8       	bld	r15, 7
 694:	f0 94       	com	r15
 696:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <w>
 69a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <w+0x1>
 69e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <w+0x2>
 6a2:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <w+0x3>
		}
		
		calculate_velocities(v,w);
 6a6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <w>
 6aa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <w+0x1>
 6ae:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <w+0x2>
 6b2:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <w+0x3>
 6b6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <v>
 6ba:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <v+0x1>
 6be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <v+0x2>
 6c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <v+0x3>
 6c6:	a3 dd       	rcall	.-1210   	; 0x20e <calculate_velocities>
	}	
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	0f 90       	pop	r0
 6ee:	0b be       	out	0x3b, r0	; 59
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <main>:

int main(void)
{	
	//Motor directions (Forward & Backward)
	// Motor 1, Motor 2, Motor 3, Motor 4 
	DDRE |= MOTOR_RIGHT_F | MOTOR_RIGHT_B | MOTOR_LEFT_F | MOTOR_LEFT_B ;
 6fa:	82 b1       	in	r24, 0x02	; 2
 6fc:	88 67       	ori	r24, 0x78	; 120
 6fe:	82 b9       	out	0x02, r24	; 2
	
	//PWM Configuration
	DDRB |= MOTOR1_PWM | MOTOR2_PWM | MOTOR3_PWM | MOTOR4_PWM;
 700:	87 b3       	in	r24, 0x17	; 23
 702:	80 6f       	ori	r24, 0xF0	; 240
 704:	87 bb       	out	0x17, r24	; 23
	sei();
	
	//Timers Initiation
	timer0_init();
	timer1_init();
	timer2_init();
 706:	78 94       	sei
 708:	d2 dc       	rcall	.-1628   	; 0xae <timer0_init>
	
	//SPI Initiation
	spi_init_slave();
 70a:	d5 dc       	rcall	.-1622   	; 0xb6 <timer1_init>
 70c:	db dc       	rcall	.-1610   	; 0xc4 <timer2_init>
	
	
    while (1) 
    {
		v = 110.0;
 70e:	de dc       	rcall	.-1604   	; 0xcc <spi_init_slave>
 710:	0f 2e       	mov	r0, r31
 712:	c1 2c       	mov	r12, r1
 714:	d1 2c       	mov	r13, r1
 716:	fc ed       	ldi	r31, 0xDC	; 220
 718:	ef 2e       	mov	r14, r31
 71a:	f2 e4       	ldi	r31, 0x42	; 66
 71c:	ff 2e       	mov	r15, r31
 71e:	f0 2d       	mov	r31, r0
 720:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <v>
 724:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <v+0x1>
 728:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <v+0x2>
 72c:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <v+0x3>
		w = 0.0;
 730:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <w>
 734:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <w+0x1>
 738:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <w+0x2>
 73c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <w+0x3>
		w = w * PI / 180.0;
		calculate_velocities(v,w);	
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	a9 01       	movw	r20, r18
 746:	c7 01       	movw	r24, r14
 748:	b6 01       	movw	r22, r12
 74a:	61 dd       	rcall	.-1342   	; 0x20e <calculate_velocities>
 74c:	e9 cf       	rjmp	.-46     	; 0x720 <main+0x26>

0000074e <__subsf3>:
 74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
 750:	bb 27       	eor	r27, r27
 752:	aa 27       	eor	r26, r26
 754:	0e d0       	rcall	.+28     	; 0x772 <__addsf3x>
 756:	75 c1       	rjmp	.+746    	; 0xa42 <__fp_round>
 758:	66 d1       	rcall	.+716    	; 0xa26 <__fp_pscA>
 75a:	30 f0       	brcs	.+12     	; 0x768 <__addsf3+0x18>
 75c:	6b d1       	rcall	.+726    	; 0xa34 <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__addsf3+0x18>
 760:	31 f4       	brne	.+12     	; 0x76e <__addsf3+0x1e>
 762:	9f 3f       	cpi	r25, 0xFF	; 255
 764:	11 f4       	brne	.+4      	; 0x76a <__addsf3+0x1a>
 766:	1e f4       	brtc	.+6      	; 0x76e <__addsf3+0x1e>
 768:	5b c1       	rjmp	.+694    	; 0xa20 <__fp_nan>
 76a:	0e f4       	brtc	.+2      	; 0x76e <__addsf3+0x1e>
 76c:	e0 95       	com	r30
 76e:	e7 fb       	bst	r30, 7
 770:	51 c1       	rjmp	.+674    	; 0xa14 <__fp_inf>

00000772 <__addsf3x>:
 772:	e9 2f       	mov	r30, r25
 774:	77 d1       	rcall	.+750    	; 0xa64 <__fp_split3>
 776:	80 f3       	brcs	.-32     	; 0x758 <__addsf3+0x8>
 778:	ba 17       	cp	r27, r26
 77a:	62 07       	cpc	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	95 07       	cpc	r25, r21
 782:	18 f0       	brcs	.+6      	; 0x78a <__addsf3x+0x18>
 784:	71 f4       	brne	.+28     	; 0x7a2 <__addsf3x+0x30>
 786:	9e f5       	brtc	.+102    	; 0x7ee <__addsf3x+0x7c>
 788:	8f c1       	rjmp	.+798    	; 0xaa8 <__fp_zero>
 78a:	0e f4       	brtc	.+2      	; 0x78e <__addsf3x+0x1c>
 78c:	e0 95       	com	r30
 78e:	0b 2e       	mov	r0, r27
 790:	ba 2f       	mov	r27, r26
 792:	a0 2d       	mov	r26, r0
 794:	0b 01       	movw	r0, r22
 796:	b9 01       	movw	r22, r18
 798:	90 01       	movw	r18, r0
 79a:	0c 01       	movw	r0, r24
 79c:	ca 01       	movw	r24, r20
 79e:	a0 01       	movw	r20, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	ff 27       	eor	r31, r31
 7a4:	59 1b       	sub	r21, r25
 7a6:	99 f0       	breq	.+38     	; 0x7ce <__addsf3x+0x5c>
 7a8:	59 3f       	cpi	r21, 0xF9	; 249
 7aa:	50 f4       	brcc	.+20     	; 0x7c0 <__addsf3x+0x4e>
 7ac:	50 3e       	cpi	r21, 0xE0	; 224
 7ae:	68 f1       	brcs	.+90     	; 0x80a <__addsf3x+0x98>
 7b0:	1a 16       	cp	r1, r26
 7b2:	f0 40       	sbci	r31, 0x00	; 0
 7b4:	a2 2f       	mov	r26, r18
 7b6:	23 2f       	mov	r18, r19
 7b8:	34 2f       	mov	r19, r20
 7ba:	44 27       	eor	r20, r20
 7bc:	58 5f       	subi	r21, 0xF8	; 248
 7be:	f3 cf       	rjmp	.-26     	; 0x7a6 <__addsf3x+0x34>
 7c0:	46 95       	lsr	r20
 7c2:	37 95       	ror	r19
 7c4:	27 95       	ror	r18
 7c6:	a7 95       	ror	r26
 7c8:	f0 40       	sbci	r31, 0x00	; 0
 7ca:	53 95       	inc	r21
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__addsf3x+0x4e>
 7ce:	7e f4       	brtc	.+30     	; 0x7ee <__addsf3x+0x7c>
 7d0:	1f 16       	cp	r1, r31
 7d2:	ba 0b       	sbc	r27, r26
 7d4:	62 0b       	sbc	r22, r18
 7d6:	73 0b       	sbc	r23, r19
 7d8:	84 0b       	sbc	r24, r20
 7da:	ba f0       	brmi	.+46     	; 0x80a <__addsf3x+0x98>
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	a1 f0       	breq	.+40     	; 0x808 <__addsf3x+0x96>
 7e0:	ff 0f       	add	r31, r31
 7e2:	bb 1f       	adc	r27, r27
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	c2 f7       	brpl	.-16     	; 0x7dc <__addsf3x+0x6a>
 7ec:	0e c0       	rjmp	.+28     	; 0x80a <__addsf3x+0x98>
 7ee:	ba 0f       	add	r27, r26
 7f0:	62 1f       	adc	r22, r18
 7f2:	73 1f       	adc	r23, r19
 7f4:	84 1f       	adc	r24, r20
 7f6:	48 f4       	brcc	.+18     	; 0x80a <__addsf3x+0x98>
 7f8:	87 95       	ror	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	9e 3f       	cpi	r25, 0xFE	; 254
 804:	08 f0       	brcs	.+2      	; 0x808 <__addsf3x+0x96>
 806:	b3 cf       	rjmp	.-154    	; 0x76e <__addsf3+0x1e>
 808:	93 95       	inc	r25
 80a:	88 0f       	add	r24, r24
 80c:	08 f0       	brcs	.+2      	; 0x810 <__addsf3x+0x9e>
 80e:	99 27       	eor	r25, r25
 810:	ee 0f       	add	r30, r30
 812:	97 95       	ror	r25
 814:	87 95       	ror	r24
 816:	08 95       	ret

00000818 <__cmpsf2>:
 818:	d9 d0       	rcall	.+434    	; 0x9cc <__fp_cmp>
 81a:	08 f4       	brcc	.+2      	; 0x81e <__cmpsf2+0x6>
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	08 95       	ret

00000820 <__divsf3>:
 820:	0c d0       	rcall	.+24     	; 0x83a <__divsf3x>
 822:	0f c1       	rjmp	.+542    	; 0xa42 <__fp_round>
 824:	07 d1       	rcall	.+526    	; 0xa34 <__fp_pscB>
 826:	40 f0       	brcs	.+16     	; 0x838 <__divsf3+0x18>
 828:	fe d0       	rcall	.+508    	; 0xa26 <__fp_pscA>
 82a:	30 f0       	brcs	.+12     	; 0x838 <__divsf3+0x18>
 82c:	21 f4       	brne	.+8      	; 0x836 <__divsf3+0x16>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	19 f0       	breq	.+6      	; 0x838 <__divsf3+0x18>
 832:	f0 c0       	rjmp	.+480    	; 0xa14 <__fp_inf>
 834:	51 11       	cpse	r21, r1
 836:	39 c1       	rjmp	.+626    	; 0xaaa <__fp_szero>
 838:	f3 c0       	rjmp	.+486    	; 0xa20 <__fp_nan>

0000083a <__divsf3x>:
 83a:	14 d1       	rcall	.+552    	; 0xa64 <__fp_split3>
 83c:	98 f3       	brcs	.-26     	; 0x824 <__divsf3+0x4>

0000083e <__divsf3_pse>:
 83e:	99 23       	and	r25, r25
 840:	c9 f3       	breq	.-14     	; 0x834 <__divsf3+0x14>
 842:	55 23       	and	r21, r21
 844:	b1 f3       	breq	.-20     	; 0x832 <__divsf3+0x12>
 846:	95 1b       	sub	r25, r21
 848:	55 0b       	sbc	r21, r21
 84a:	bb 27       	eor	r27, r27
 84c:	aa 27       	eor	r26, r26
 84e:	62 17       	cp	r22, r18
 850:	73 07       	cpc	r23, r19
 852:	84 07       	cpc	r24, r20
 854:	38 f0       	brcs	.+14     	; 0x864 <__divsf3_pse+0x26>
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	22 0f       	add	r18, r18
 85c:	33 1f       	adc	r19, r19
 85e:	44 1f       	adc	r20, r20
 860:	aa 1f       	adc	r26, r26
 862:	a9 f3       	breq	.-22     	; 0x84e <__divsf3_pse+0x10>
 864:	33 d0       	rcall	.+102    	; 0x8cc <__divsf3_pse+0x8e>
 866:	0e 2e       	mov	r0, r30
 868:	3a f0       	brmi	.+14     	; 0x878 <__divsf3_pse+0x3a>
 86a:	e0 e8       	ldi	r30, 0x80	; 128
 86c:	30 d0       	rcall	.+96     	; 0x8ce <__divsf3_pse+0x90>
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	e6 95       	lsr	r30
 874:	00 1c       	adc	r0, r0
 876:	ca f7       	brpl	.-14     	; 0x86a <__divsf3_pse+0x2c>
 878:	29 d0       	rcall	.+82     	; 0x8cc <__divsf3_pse+0x8e>
 87a:	fe 2f       	mov	r31, r30
 87c:	27 d0       	rcall	.+78     	; 0x8cc <__divsf3_pse+0x8e>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	bb 1f       	adc	r27, r27
 886:	26 17       	cp	r18, r22
 888:	37 07       	cpc	r19, r23
 88a:	48 07       	cpc	r20, r24
 88c:	ab 07       	cpc	r26, r27
 88e:	b0 e8       	ldi	r27, 0x80	; 128
 890:	09 f0       	breq	.+2      	; 0x894 <__divsf3_pse+0x56>
 892:	bb 0b       	sbc	r27, r27
 894:	80 2d       	mov	r24, r0
 896:	bf 01       	movw	r22, r30
 898:	ff 27       	eor	r31, r31
 89a:	93 58       	subi	r25, 0x83	; 131
 89c:	5f 4f       	sbci	r21, 0xFF	; 255
 89e:	2a f0       	brmi	.+10     	; 0x8aa <__divsf3_pse+0x6c>
 8a0:	9e 3f       	cpi	r25, 0xFE	; 254
 8a2:	51 05       	cpc	r21, r1
 8a4:	68 f0       	brcs	.+26     	; 0x8c0 <__divsf3_pse+0x82>
 8a6:	b6 c0       	rjmp	.+364    	; 0xa14 <__fp_inf>
 8a8:	00 c1       	rjmp	.+512    	; 0xaaa <__fp_szero>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	ec f3       	brlt	.-6      	; 0x8a8 <__divsf3_pse+0x6a>
 8ae:	98 3e       	cpi	r25, 0xE8	; 232
 8b0:	dc f3       	brlt	.-10     	; 0x8a8 <__divsf3_pse+0x6a>
 8b2:	86 95       	lsr	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f7 95       	ror	r31
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__divsf3_pse+0x74>
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret
 8cc:	e1 e0       	ldi	r30, 0x01	; 1
 8ce:	66 0f       	add	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	bb 1f       	adc	r27, r27
 8d6:	62 17       	cp	r22, r18
 8d8:	73 07       	cpc	r23, r19
 8da:	84 07       	cpc	r24, r20
 8dc:	ba 07       	cpc	r27, r26
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__divsf3_pse+0xaa>
 8e0:	62 1b       	sub	r22, r18
 8e2:	73 0b       	sbc	r23, r19
 8e4:	84 0b       	sbc	r24, r20
 8e6:	ba 0b       	sbc	r27, r26
 8e8:	ee 1f       	adc	r30, r30
 8ea:	88 f7       	brcc	.-30     	; 0x8ce <__divsf3_pse+0x90>
 8ec:	e0 95       	com	r30
 8ee:	08 95       	ret

000008f0 <__fixsfsi>:
 8f0:	04 d0       	rcall	.+8      	; 0x8fa <__fixunssfsi>
 8f2:	68 94       	set
 8f4:	b1 11       	cpse	r27, r1
 8f6:	d9 c0       	rjmp	.+434    	; 0xaaa <__fp_szero>
 8f8:	08 95       	ret

000008fa <__fixunssfsi>:
 8fa:	bc d0       	rcall	.+376    	; 0xa74 <__fp_splitA>
 8fc:	88 f0       	brcs	.+34     	; 0x920 <__fixunssfsi+0x26>
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	90 f0       	brcs	.+36     	; 0x926 <__fixunssfsi+0x2c>
 902:	b9 2f       	mov	r27, r25
 904:	99 27       	eor	r25, r25
 906:	b7 51       	subi	r27, 0x17	; 23
 908:	a0 f0       	brcs	.+40     	; 0x932 <__fixunssfsi+0x38>
 90a:	d1 f0       	breq	.+52     	; 0x940 <__fixunssfsi+0x46>
 90c:	66 0f       	add	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	1a f0       	brmi	.+6      	; 0x91c <__fixunssfsi+0x22>
 916:	ba 95       	dec	r27
 918:	c9 f7       	brne	.-14     	; 0x90c <__fixunssfsi+0x12>
 91a:	12 c0       	rjmp	.+36     	; 0x940 <__fixunssfsi+0x46>
 91c:	b1 30       	cpi	r27, 0x01	; 1
 91e:	81 f0       	breq	.+32     	; 0x940 <__fixunssfsi+0x46>
 920:	c3 d0       	rcall	.+390    	; 0xaa8 <__fp_zero>
 922:	b1 e0       	ldi	r27, 0x01	; 1
 924:	08 95       	ret
 926:	c0 c0       	rjmp	.+384    	; 0xaa8 <__fp_zero>
 928:	67 2f       	mov	r22, r23
 92a:	78 2f       	mov	r23, r24
 92c:	88 27       	eor	r24, r24
 92e:	b8 5f       	subi	r27, 0xF8	; 248
 930:	39 f0       	breq	.+14     	; 0x940 <__fixunssfsi+0x46>
 932:	b9 3f       	cpi	r27, 0xF9	; 249
 934:	cc f3       	brlt	.-14     	; 0x928 <__fixunssfsi+0x2e>
 936:	86 95       	lsr	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b3 95       	inc	r27
 93e:	d9 f7       	brne	.-10     	; 0x936 <__fixunssfsi+0x3c>
 940:	3e f4       	brtc	.+14     	; 0x950 <__fixunssfsi+0x56>
 942:	90 95       	com	r25
 944:	80 95       	com	r24
 946:	70 95       	com	r23
 948:	61 95       	neg	r22
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	08 95       	ret

00000952 <__floatunsisf>:
 952:	e8 94       	clt
 954:	09 c0       	rjmp	.+18     	; 0x968 <__floatsisf+0x12>

00000956 <__floatsisf>:
 956:	97 fb       	bst	r25, 7
 958:	3e f4       	brtc	.+14     	; 0x968 <__floatsisf+0x12>
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	99 23       	and	r25, r25
 96a:	a9 f0       	breq	.+42     	; 0x996 <__floatsisf+0x40>
 96c:	f9 2f       	mov	r31, r25
 96e:	96 e9       	ldi	r25, 0x96	; 150
 970:	bb 27       	eor	r27, r27
 972:	93 95       	inc	r25
 974:	f6 95       	lsr	r31
 976:	87 95       	ror	r24
 978:	77 95       	ror	r23
 97a:	67 95       	ror	r22
 97c:	b7 95       	ror	r27
 97e:	f1 11       	cpse	r31, r1
 980:	f8 cf       	rjmp	.-16     	; 0x972 <__floatsisf+0x1c>
 982:	fa f4       	brpl	.+62     	; 0x9c2 <__floatsisf+0x6c>
 984:	bb 0f       	add	r27, r27
 986:	11 f4       	brne	.+4      	; 0x98c <__floatsisf+0x36>
 988:	60 ff       	sbrs	r22, 0
 98a:	1b c0       	rjmp	.+54     	; 0x9c2 <__floatsisf+0x6c>
 98c:	6f 5f       	subi	r22, 0xFF	; 255
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	16 c0       	rjmp	.+44     	; 0x9c2 <__floatsisf+0x6c>
 996:	88 23       	and	r24, r24
 998:	11 f0       	breq	.+4      	; 0x99e <__floatsisf+0x48>
 99a:	96 e9       	ldi	r25, 0x96	; 150
 99c:	11 c0       	rjmp	.+34     	; 0x9c0 <__floatsisf+0x6a>
 99e:	77 23       	and	r23, r23
 9a0:	21 f0       	breq	.+8      	; 0x9aa <__floatsisf+0x54>
 9a2:	9e e8       	ldi	r25, 0x8E	; 142
 9a4:	87 2f       	mov	r24, r23
 9a6:	76 2f       	mov	r23, r22
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__floatsisf+0x5e>
 9aa:	66 23       	and	r22, r22
 9ac:	71 f0       	breq	.+28     	; 0x9ca <__floatsisf+0x74>
 9ae:	96 e8       	ldi	r25, 0x86	; 134
 9b0:	86 2f       	mov	r24, r22
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	2a f0       	brmi	.+10     	; 0x9c2 <__floatsisf+0x6c>
 9b8:	9a 95       	dec	r25
 9ba:	66 0f       	add	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	da f7       	brpl	.-10     	; 0x9b8 <__floatsisf+0x62>
 9c2:	88 0f       	add	r24, r24
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret

000009cc <__fp_cmp>:
 9cc:	99 0f       	add	r25, r25
 9ce:	00 08       	sbc	r0, r0
 9d0:	55 0f       	add	r21, r21
 9d2:	aa 0b       	sbc	r26, r26
 9d4:	e0 e8       	ldi	r30, 0x80	; 128
 9d6:	fe ef       	ldi	r31, 0xFE	; 254
 9d8:	16 16       	cp	r1, r22
 9da:	17 06       	cpc	r1, r23
 9dc:	e8 07       	cpc	r30, r24
 9de:	f9 07       	cpc	r31, r25
 9e0:	c0 f0       	brcs	.+48     	; 0xa12 <__fp_cmp+0x46>
 9e2:	12 16       	cp	r1, r18
 9e4:	13 06       	cpc	r1, r19
 9e6:	e4 07       	cpc	r30, r20
 9e8:	f5 07       	cpc	r31, r21
 9ea:	98 f0       	brcs	.+38     	; 0xa12 <__fp_cmp+0x46>
 9ec:	62 1b       	sub	r22, r18
 9ee:	73 0b       	sbc	r23, r19
 9f0:	84 0b       	sbc	r24, r20
 9f2:	95 0b       	sbc	r25, r21
 9f4:	39 f4       	brne	.+14     	; 0xa04 <__fp_cmp+0x38>
 9f6:	0a 26       	eor	r0, r26
 9f8:	61 f0       	breq	.+24     	; 0xa12 <__fp_cmp+0x46>
 9fa:	23 2b       	or	r18, r19
 9fc:	24 2b       	or	r18, r20
 9fe:	25 2b       	or	r18, r21
 a00:	21 f4       	brne	.+8      	; 0xa0a <__fp_cmp+0x3e>
 a02:	08 95       	ret
 a04:	0a 26       	eor	r0, r26
 a06:	09 f4       	brne	.+2      	; 0xa0a <__fp_cmp+0x3e>
 a08:	a1 40       	sbci	r26, 0x01	; 1
 a0a:	a6 95       	lsr	r26
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	81 1d       	adc	r24, r1
 a10:	81 1d       	adc	r24, r1
 a12:	08 95       	ret

00000a14 <__fp_inf>:
 a14:	97 f9       	bld	r25, 7
 a16:	9f 67       	ori	r25, 0x7F	; 127
 a18:	80 e8       	ldi	r24, 0x80	; 128
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	08 95       	ret

00000a20 <__fp_nan>:
 a20:	9f ef       	ldi	r25, 0xFF	; 255
 a22:	80 ec       	ldi	r24, 0xC0	; 192
 a24:	08 95       	ret

00000a26 <__fp_pscA>:
 a26:	00 24       	eor	r0, r0
 a28:	0a 94       	dec	r0
 a2a:	16 16       	cp	r1, r22
 a2c:	17 06       	cpc	r1, r23
 a2e:	18 06       	cpc	r1, r24
 a30:	09 06       	cpc	r0, r25
 a32:	08 95       	ret

00000a34 <__fp_pscB>:
 a34:	00 24       	eor	r0, r0
 a36:	0a 94       	dec	r0
 a38:	12 16       	cp	r1, r18
 a3a:	13 06       	cpc	r1, r19
 a3c:	14 06       	cpc	r1, r20
 a3e:	05 06       	cpc	r0, r21
 a40:	08 95       	ret

00000a42 <__fp_round>:
 a42:	09 2e       	mov	r0, r25
 a44:	03 94       	inc	r0
 a46:	00 0c       	add	r0, r0
 a48:	11 f4       	brne	.+4      	; 0xa4e <__fp_round+0xc>
 a4a:	88 23       	and	r24, r24
 a4c:	52 f0       	brmi	.+20     	; 0xa62 <__fp_round+0x20>
 a4e:	bb 0f       	add	r27, r27
 a50:	40 f4       	brcc	.+16     	; 0xa62 <__fp_round+0x20>
 a52:	bf 2b       	or	r27, r31
 a54:	11 f4       	brne	.+4      	; 0xa5a <__fp_round+0x18>
 a56:	60 ff       	sbrs	r22, 0
 a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fp_round+0x20>
 a5a:	6f 5f       	subi	r22, 0xFF	; 255
 a5c:	7f 4f       	sbci	r23, 0xFF	; 255
 a5e:	8f 4f       	sbci	r24, 0xFF	; 255
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__fp_split3>:
 a64:	57 fd       	sbrc	r21, 7
 a66:	90 58       	subi	r25, 0x80	; 128
 a68:	44 0f       	add	r20, r20
 a6a:	55 1f       	adc	r21, r21
 a6c:	59 f0       	breq	.+22     	; 0xa84 <__fp_splitA+0x10>
 a6e:	5f 3f       	cpi	r21, 0xFF	; 255
 a70:	71 f0       	breq	.+28     	; 0xa8e <__fp_splitA+0x1a>
 a72:	47 95       	ror	r20

00000a74 <__fp_splitA>:
 a74:	88 0f       	add	r24, r24
 a76:	97 fb       	bst	r25, 7
 a78:	99 1f       	adc	r25, r25
 a7a:	61 f0       	breq	.+24     	; 0xa94 <__fp_splitA+0x20>
 a7c:	9f 3f       	cpi	r25, 0xFF	; 255
 a7e:	79 f0       	breq	.+30     	; 0xa9e <__fp_splitA+0x2a>
 a80:	87 95       	ror	r24
 a82:	08 95       	ret
 a84:	12 16       	cp	r1, r18
 a86:	13 06       	cpc	r1, r19
 a88:	14 06       	cpc	r1, r20
 a8a:	55 1f       	adc	r21, r21
 a8c:	f2 cf       	rjmp	.-28     	; 0xa72 <__fp_split3+0xe>
 a8e:	46 95       	lsr	r20
 a90:	f1 df       	rcall	.-30     	; 0xa74 <__fp_splitA>
 a92:	08 c0       	rjmp	.+16     	; 0xaa4 <__fp_splitA+0x30>
 a94:	16 16       	cp	r1, r22
 a96:	17 06       	cpc	r1, r23
 a98:	18 06       	cpc	r1, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	f1 cf       	rjmp	.-30     	; 0xa80 <__fp_splitA+0xc>
 a9e:	86 95       	lsr	r24
 aa0:	71 05       	cpc	r23, r1
 aa2:	61 05       	cpc	r22, r1
 aa4:	08 94       	sec
 aa6:	08 95       	ret

00000aa8 <__fp_zero>:
 aa8:	e8 94       	clt

00000aaa <__fp_szero>:
 aaa:	bb 27       	eor	r27, r27
 aac:	66 27       	eor	r22, r22
 aae:	77 27       	eor	r23, r23
 ab0:	cb 01       	movw	r24, r22
 ab2:	97 f9       	bld	r25, 7
 ab4:	08 95       	ret

00000ab6 <__gesf2>:
 ab6:	8a df       	rcall	.-236    	; 0x9cc <__fp_cmp>
 ab8:	08 f4       	brcc	.+2      	; 0xabc <__gesf2+0x6>
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__mulsf3>:
 abe:	0b d0       	rcall	.+22     	; 0xad6 <__mulsf3x>
 ac0:	c0 cf       	rjmp	.-128    	; 0xa42 <__fp_round>
 ac2:	b1 df       	rcall	.-158    	; 0xa26 <__fp_pscA>
 ac4:	28 f0       	brcs	.+10     	; 0xad0 <__mulsf3+0x12>
 ac6:	b6 df       	rcall	.-148    	; 0xa34 <__fp_pscB>
 ac8:	18 f0       	brcs	.+6      	; 0xad0 <__mulsf3+0x12>
 aca:	95 23       	and	r25, r21
 acc:	09 f0       	breq	.+2      	; 0xad0 <__mulsf3+0x12>
 ace:	a2 cf       	rjmp	.-188    	; 0xa14 <__fp_inf>
 ad0:	a7 cf       	rjmp	.-178    	; 0xa20 <__fp_nan>
 ad2:	11 24       	eor	r1, r1
 ad4:	ea cf       	rjmp	.-44     	; 0xaaa <__fp_szero>

00000ad6 <__mulsf3x>:
 ad6:	c6 df       	rcall	.-116    	; 0xa64 <__fp_split3>
 ad8:	a0 f3       	brcs	.-24     	; 0xac2 <__mulsf3+0x4>

00000ada <__mulsf3_pse>:
 ada:	95 9f       	mul	r25, r21
 adc:	d1 f3       	breq	.-12     	; 0xad2 <__mulsf3+0x14>
 ade:	95 0f       	add	r25, r21
 ae0:	50 e0       	ldi	r21, 0x00	; 0
 ae2:	55 1f       	adc	r21, r21
 ae4:	62 9f       	mul	r22, r18
 ae6:	f0 01       	movw	r30, r0
 ae8:	72 9f       	mul	r23, r18
 aea:	bb 27       	eor	r27, r27
 aec:	f0 0d       	add	r31, r0
 aee:	b1 1d       	adc	r27, r1
 af0:	63 9f       	mul	r22, r19
 af2:	aa 27       	eor	r26, r26
 af4:	f0 0d       	add	r31, r0
 af6:	b1 1d       	adc	r27, r1
 af8:	aa 1f       	adc	r26, r26
 afa:	64 9f       	mul	r22, r20
 afc:	66 27       	eor	r22, r22
 afe:	b0 0d       	add	r27, r0
 b00:	a1 1d       	adc	r26, r1
 b02:	66 1f       	adc	r22, r22
 b04:	82 9f       	mul	r24, r18
 b06:	22 27       	eor	r18, r18
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	62 1f       	adc	r22, r18
 b0e:	73 9f       	mul	r23, r19
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	62 1f       	adc	r22, r18
 b16:	83 9f       	mul	r24, r19
 b18:	a0 0d       	add	r26, r0
 b1a:	61 1d       	adc	r22, r1
 b1c:	22 1f       	adc	r18, r18
 b1e:	74 9f       	mul	r23, r20
 b20:	33 27       	eor	r19, r19
 b22:	a0 0d       	add	r26, r0
 b24:	61 1d       	adc	r22, r1
 b26:	23 1f       	adc	r18, r19
 b28:	84 9f       	mul	r24, r20
 b2a:	60 0d       	add	r22, r0
 b2c:	21 1d       	adc	r18, r1
 b2e:	82 2f       	mov	r24, r18
 b30:	76 2f       	mov	r23, r22
 b32:	6a 2f       	mov	r22, r26
 b34:	11 24       	eor	r1, r1
 b36:	9f 57       	subi	r25, 0x7F	; 127
 b38:	50 40       	sbci	r21, 0x00	; 0
 b3a:	8a f0       	brmi	.+34     	; 0xb5e <__mulsf3_pse+0x84>
 b3c:	e1 f0       	breq	.+56     	; 0xb76 <__mulsf3_pse+0x9c>
 b3e:	88 23       	and	r24, r24
 b40:	4a f0       	brmi	.+18     	; 0xb54 <__mulsf3_pse+0x7a>
 b42:	ee 0f       	add	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	bb 1f       	adc	r27, r27
 b48:	66 1f       	adc	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	91 50       	subi	r25, 0x01	; 1
 b50:	50 40       	sbci	r21, 0x00	; 0
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__mulsf3_pse+0x64>
 b54:	9e 3f       	cpi	r25, 0xFE	; 254
 b56:	51 05       	cpc	r21, r1
 b58:	70 f0       	brcs	.+28     	; 0xb76 <__mulsf3_pse+0x9c>
 b5a:	5c cf       	rjmp	.-328    	; 0xa14 <__fp_inf>
 b5c:	a6 cf       	rjmp	.-180    	; 0xaaa <__fp_szero>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	ec f3       	brlt	.-6      	; 0xb5c <__mulsf3_pse+0x82>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	dc f3       	brlt	.-10     	; 0xb5c <__mulsf3_pse+0x82>
 b66:	86 95       	lsr	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	b7 95       	ror	r27
 b6e:	f7 95       	ror	r31
 b70:	e7 95       	ror	r30
 b72:	9f 5f       	subi	r25, 0xFF	; 255
 b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x8c>
 b76:	fe 2b       	or	r31, r30
 b78:	88 0f       	add	r24, r24
 b7a:	91 1d       	adc	r25, r1
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
